pipeline temperaturePipeline {
    temperatureExtractor
        -> SelectCols
        -> DeleteCols
        -> RenameTwoHeaders
        -> TemperatureTableInterpreter
        -> CelsiusToFahrenheitTransformerTemperature
        -> CelsiusToFahrenheitTransformerBatterie 
        -> TemperatureLoader;

    block temperatureExtractor oftype CSVExtractor { 
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip"; 
        delimiter: ";";
        path: "/data.csv";
    }

    block SelectCols oftype CellRangeSelector {
        select: range A1:K*;
    }

    block DeleteCols oftype ColumnDeleter {
        delete: [column F, column G, column H, column I]; 
    }

    block RenameTwoHeaders oftype CellWriter {
        at: range E1:F1;
        write: ["Temperature", "Batterietemperatur"];
    }

    block TemperatureTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "Geraet" oftype ValidPositiveIntegers,
            "Hersteller" oftype ValidTexts,
            "Model" oftype ValidTexts,
            "Monat" oftype ValidMonth,
            "Temperature" oftype ValidTemperature,
            "Batterietemperatur" oftype ValidTemperature,
            "Geraet aktiv" oftype BooleanTextValue, 
        ];
    }

    block CelsiusToFahrenheitTransformerTemperature oftype TableTransformer {
        inputColumns: ["Temperature"];
        outputColumn: "Temperature";
        use: CelsiusToFahrenheit;
    }

    block CelsiusToFahrenheitTransformerBatterie oftype TableTransformer {
        inputColumns: ["Batterietemperatur"];
        outputColumn: "Batterietemperatur";
        use: CelsiusToFahrenheit;
    }

    block TemperatureLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }

    // Note: Applying the ValidTemperature Valuetype here leads to an error
    // However this doesn't matter, because we check for valid Celsius values
    // and then transform them to subsequently valid Fahrenheit values
    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }

    valuetype ValidPositiveIntegers oftype integer {
        constraints: [
            positiveIntegerConstraint,
        ];
    }

    constraint positiveIntegerConstraint oftype RangeConstraint {
        lowerBound: 1;
        upperBound: 9007199254740991;      
    }

    valuetype ValidMonth oftype integer {
        constraints: [
            validMonthConstraint,
        ];
    }

    constraint validMonthConstraint oftype RangeConstraint {
        lowerBound: 1;
        upperBound: 12;      
    }

    valuetype ValidTexts oftype text {
        constraints: [
            noEmptyCells
        ];
    }

    // Note: Length Constraint doesn't work without a maxLength setting
    constraint noEmptyCells oftype LengthConstraint {
        minLength: 1;
        maxLength: 9007199254740991;
    }

    // The temperature cannot go below absolute zero, which corresponds to −273,15°C. This check happens before
    // the transformation to Fahrenheit, therefore we need to use Celsius.
    // There is probably also a narrower expected maximum temperature for batteries than 500°C,
    // however they are unknown to me. Setting one is still sound, because we want to catch possible 
    // errors and this leaves enough allowance
    valuetype ValidTemperature oftype decimal {
        constraints: [
            validTemperatureConstraint,
        ];
    }
    
    constraint validTemperatureConstraint oftype RangeConstraint {
        lowerBound: -273.15;
        upperBound: 500;      
    }

    // Model boolean value by only allowing "Ja" or "Nein" as valid input
    valuetype BooleanTextValue oftype text {
        constraints: [
            validBooleanValue
        ];
    }

    constraint validBooleanValue oftype AllowlistConstraint {
        allowlist: ["Ja", "Nein"];
    }
}


// Define a composite block to make the actual pipeline more compact
composite blocktype CSVExtractor {
    // Properties of the CSVExtractor, some with default values
    property url oftype text;
    property path oftype text;
    property delimiter oftype text: ',';
    property enclosing oftype text: '';
    property enclosingEscape oftype text: '';

    // Input and outputs
    input inputName oftype None;
    output outputName oftype Sheet;

    // Pipeline definition from input, over blocks defined later, to output
    inputName
        ->ZipExtractor
        ->DataFilePicker
        ->FileTextInterpreter
        ->FileCSVInterpreter
        ->outputName;

    // Block definitions using values from properties by name
    block ZipExtractor oftype GTFSExtractor { url: url; }
    block DataFilePicker oftype FilePicker { path: path; }
    block FileTextInterpreter oftype TextFileInterpreter {}
    block FileCSVInterpreter oftype CSVInterpreter {
        delimiter: delimiter;
        enclosing: enclosing;
        enclosingEscape: enclosingEscape;
    }   
}